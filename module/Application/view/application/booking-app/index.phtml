<?php
/*
 * This file is part of the codeliner/php-ddd-cargo-sample package.
 * (c) Alexander Miertsch <kontakt@codeliner.ws>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
?>
<div class="jumbotron">
    <h1><?php echo $this->translate('Cargo Booking Application') ?></h1>
    <p><?php echo $this->translate('Choose a Cargo from the list to view it\'s routing details or book a new Cargo.') ?></p>
</div>
<div id="booking-app-container">
    <img src="<?php echo $this->basePath('/img/ajax-loader.gif') ?>" alt="loading ..." />
</div>
<footer>
    <button id="overview-btn" class="btn btn-default icon icon-align-left icon-arrow-left">back to overview</button>
</footer>

<script id="cargo-overview-tpl" type="text/template">
    <div class="row">
        <div class="col-md-12">
            <% if (obj.cargos.length === 0) { %>
            <p class="alert-danger"><?php echo $this->translate('The list is empty. You have to add a cargo first!'); ?></p>
            <% } else { %>
            <ul id="cargo-list"></ul>
            <% } %>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <p><a id="book-cargo" class="btn btn-success btn-lg" href="#"><?php echo $this->translate('Book new Cargo') ?> &raquo;</a></p>
        </div>
    </div>
</script>

<script id="cargo-list-item-tpl" type="text/template">
    <li><a href="#" class="cargo-details-link"><%- cargo.tracking_id %></a> From: <%- locations.get(cargo.origin).get('name') %> To: <%- locations.get(cargo.final_destination).get('name') %></li>
</script>

<script id="cargo-show-tpl" type="text/template">
    <div class="row">
        <div class="col-md-12">
            <h2>Cargo from <%- locations.get(cargo.origin).get('name') %> (<%- cargo.tracking_id %>)</h2>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <h3>route specification</h3>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6 alert-info">
            <strong>From: </strong><%- locations.get(cargo.origin).get('name') %>
    </div>
        <div class="col-md-6 alert-info">
            <strong>To: </strong><%- locations.get(cargo.final_destination).get('name') %>
    </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <h3>Itinerary</h3>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="panel panel-default itinerary">
                <div class="panel-body">
                <% if (cargo.legs == "undefined" || cargo.legs.length == 0) { %>
                <p class="warning">Cargo is not assigned to a route</p>
                <% } else { %>
                <% _.each(cargo.legs, function(leg) { %>
                    <div class="row">
                    <div class="col-md-6">
                        <strong>Load location: </strong><%- locations.get(leg.load_location).get('name') %>
                        </div>
                    <div class="col-md-6">
                        <strong>Load time: </strong><%- formatDateTime(leg.load_time) %>
                        </div>
                </div>
                    <div class="row">
                        <div class="col-md-6">
                            <strong>Unload location: </strong><%- locations.get(leg.unload_location).get('name') %>
                        </div>
                        <div class="col-md-6">
                            <strong>Unload time: </strong><%- formatDateTime(leg.unload_time) %>
                        </div>
                    </div>
                <% }) %>
                <% } %>
            </div>
        </div>
    </div>
</script>

<script id="cargo-show-jumbotron-tpl" type="test/template">
    <h1><?php echo $this->translate('Cargo Overview') ?></h1>
</script>

<script id="cargo-form-tpl" type="text/template">
    <div class="row">
        <div class="col-md-12">
            <?php
            $form = $this->cargoForm;
            $form->prepare();

            $form->setAttribute('method', 'post');

            echo $this->form()->openTag($form);

            $origin = $form->get('origin');
            echo $this->ztbFormElement($origin);

            $destination = $form->get('final_destination');
            echo $this->ztbFormElement($destination);

            $trackingId = $form->get('trackingId');
            echo $this->ztbFormElement($trackingId);

            echo '<p></p>';

            echo $this->ztbFormElement($form->get('send'));

            echo $this->form()->closeTag();
            ?>
        </div>
    </div>
</script>

<script id="cargo-form-jumbotron-tpl" type="text/template">
    <h1><?php echo $this->translate('Add new Cargo') ?></h1>
    <p><?php echo $this->translate('In the ChapterFour version of the Shipping System you can specify origin and destination of a Cargo. In a second step, the booking system suggest possible routes and you can assign the new Cargo to one of the routes.') ?></p>
</script>

<script id="show-route-candidates-tpl" type="text/template">
    <div class="row">
        <div class="col-md-12">
            <h2>Cargo from <%- obj.locations.get(obj.cargo.origin).get('name') %> (<%- obj.cargo.tracking_id %> )</h2>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <h3>Available routes</h3>
        </div>
    </div>
    <div id="route-candidate-list"></div>
</script>

<script id="show-route-candidates-jumbotron-tpl" type="text/template">
    <h1><?php echo $this->translate('Assign Route to Cargo') ?></h1>
</script>

<script id="route-candidate-tpl" type="text/template">
    <div class="row">
        <div class="col-md-12">
            <div class="panel panel-default itinerary">
                <div class="panel-body">
                <% _.each(legs, function(leg) { %>
                    <div class="row">
                    <div class="col-md-6">
                        <strong>Load location: </strong><%- obj.locations.get(leg.load_location).get('name') %>
                        </div>
                    <div class="col-md-6">
                        <strong>Load time: </strong><%- obj.formatDateTime(leg.load_time) %>
                        </div>
                </div>
                    <div class="row">
                        <div class="col-md-6">
                            <strong>Unload location: </strong><%- obj.locations.get(leg.unload_location).get('name') %>
                        </div>
                        <div class="col-md-6">
                            <strong>Unload time: </strong><%- obj.formatDateTime(leg.unload_time) %>
                        </div>
                    </div>
                <% }) %>
                <div class="row">
                        <div class="col-md-12">
                            <a href="#"
                               class="btn btn-success assign-cargo-btn">Assign Cargo</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</script>


<script type="text/javascript">

    //Models
    var CargoRoutingModel = Backbone.Model.extend({
        idAttribute : "tracking_id"
    });

    var LocationModel = Backbone.Model.extend({
        idAttribute : "un_locode"
    });

    var RouteCandidateModel = Backbone.Model.extend({});

    //Collections
    var CargoRoutingCollection = Backbone.Collection.extend({
        url : "<?php echo $this->serverUrl() . $this->url('api/cargoroutings') ?>",
        parse : function(response) {
            return response._embedded.cargoroutings;
        },
        model : CargoRoutingModel
    });

    var CargoRoutings = new CargoRoutingCollection();

    var LocationCollection = Backbone.Collection.extend({
        model : LocationModel
    });

    var Locations = new LocationCollection();

    Locations.reset(<?php echo json_encode($this->locations) ?>);


    var RouteCandidateCollection = Backbone.Collection.extend({
        urlFromCargoRouting : function (cargoRouting) {
            this.url = cargoRouting.get('_links').self.href + '/routecandidates';
        },
        parse : function (response) {
            return response._embedded.routecandidates;
        },
        model : RouteCandidateModel
    });

    //Views
    var ViewHelpers = {
        formatDateTime : function(dateString) {
            var date = new Date(dateString);

            return date.getFullYear() + '/' + ViewHelpers.addLeadingZero(date.getMonth()) + '/' + ViewHelpers.addLeadingZero(date.getDate()) + ' '
                + ViewHelpers.addLeadingZero(date.getHours()) + ':' + ViewHelpers.addLeadingZero(date.getMinutes());
        },
        addLeadingZero : function (number) {
            if (number < 10) {
                return '0' + number;
            }

            return number;
        }
    };

    var CargoRoutingListItemView = Backbone.View.extend({
        template : _.template($("#cargo-list-item-tpl").html()),
        events : {
            "click .cargo-details-link" : "showCargoDetails"
        },
        setApp : function (app) {
            this.app = app;
        },
        render : function() {
            this.$el.html(this.template({ cargo : this.model.toJSON(), locations : Locations}));
            return this;
        },
        showCargoDetails : function (e) {
            e.preventDefault();

            this.app.renderCargoRoutingDetails(this.model);
        }
    });

    var CargoOverviewView = Backbone.View.extend({
        id : "cargo-overview",
        template : _.template($("#cargo-overview-tpl").html()),
        events : {
            "click #book-cargo" : "renderBookCargo"
        },
        setApp : function (app) {
            this.app = app;
        },
        render : function() {
            this.$el.html(this.template({cargos : CargoRoutings}));

            CargoRoutings.each(function(cargoRouting) {
                var view = new CargoRoutingListItemView({model : cargoRouting});

                view.setApp(this.app);

                this.$("#cargo-list").append(view.render().el);
            }, this);
        },
        renderBookCargo : function (e) {
            e.preventDefault();
            this.app.renderBookCargo();

        }
    });

    var CargoFormView = Backbone.View.extend({
        template : _.template($("#cargo-form-tpl").html()),
        events : {
            "click input[type=submit]" : "bookCargo"
        },
        setApp : function (app) {
            this.app = app;
        },
        render : function() {
            this.$el.html(this.template());
            return this;
        },
        bookCargo : function (e) {
            e.preventDefault();

            var cargoRoutingData = {
                origin : this.$("select[name=origin]").val(),
                final_destination : this.$("select[name=final_destination]").val()
            };

            var cargoRouting = new CargoRoutingModel();

            CargoRoutings.add(cargoRouting);

            var self = this;

            cargoRouting.save(
                cargoRoutingData,
                {
                    success : function (model) {
                        self.requestRouteCandidatesForCargo(model);
                    },
                    error : function (model, response) {
                        var json = response.responseJSON;

                        if (typeof json.errors != "undefined") {
                            _.each(json.errors, function(error, formEl) {
                                this.$el.find('#control-group-' + formEl).addClass('has-error').find('.controls').append(
                                    '<span class="help-block warning">'+
                                        _.toArray(error).join("<br />")
                                        +'</span>'
                                );
                            }, self);
                        }
                    }
                }
            );
        },
        requestRouteCandidatesForCargo : function (cargoRouting) {
            var routeCandidates = new RouteCandidateCollection();
            routeCandidates.urlFromCargoRouting(cargoRouting);

            var self = this;

            routeCandidates.fetch({reset : true, success : function() {
                self.app.renderListRouteCandidates(cargoRouting, routeCandidates);
            }});
        }
    });

    var RouteCandidateItemView = Backbone.View.extend({
        template : _.template($("#route-candidate-tpl").html()),
        events : {
            "click .assign-cargo-btn" : "onAssignCargo"
        },
        setApp : function (app) {
            this.app = app;
        },
        render : function() {
            this.$el.html(this.template(_.extend(this.model.toJSON(), {locations : Locations}, ViewHelpers)));
            return this;
        },
        onAssignCargo : function (e) {
            e.preventDefault();

            var self = this;

            this.cargo.set();

            this.cargo.save(
                {legs : this.model.get("legs")},
                {
                    success : function () {
                        self.app.renderCargoOverview();
                    },
                    error : function() {
                        console.log(arguments);
                        alert("Error while assigning cargo to route. Please check console for details.");
                    }
                }
            );
        },
        setCargo : function (aCargo) {
            this.cargo = aCargo;
        }
    });

    var RouteCandidateListView = Backbone.View.extend({
        template : _.template($("#show-route-candidates-tpl").html()),
        setApp : function (app) {
            this.app = app;
        },
        render : function() {
            this.$el.html(this.template({cargo : this.model.cargoRouting.toJSON(), locations : this.model.locations}));

            this.model.routeCandidates.each(function(routeCandidate) {
                var view = new RouteCandidateItemView({model : routeCandidate});

                view.setCargo(this.model.cargoRouting);
                view.setApp(this.app);

                this.$("#route-candidate-list").append(view.render().el);
            }, this);


        }
    });

    var CargoRoutingDetailsView = Backbone.View.extend({
        template : _.template($("#cargo-show-tpl").html()),
        setApp : function (app) {
            this.app = app;
        },
        render : function() {
            this.$el.html(
                this.template(
                    _.extend(
                        {cargo : this.model.cargoRouting.toJSON(), locations : this.model.locations},
                        ViewHelpers
                    )
                )
            );
        }
    })


    var AppView = Backbone.View.extend({
        initialize : function() {

            this.listenTo(CargoRoutings, "reset", this.renderCargoOverview);

            CargoRoutings.fetch({reset : true});
        },
        render : function(childView) {

            if (typeof this.currentView != "undefined") {
                this.currentView.remove();
            }

            childView.setApp(this);

            childView.render();

            this.$el.html(childView.el);

            this.currentView = childView;

            $("#overview-btn").click(function (e) {
                e.preventDefault();
                App.renderCargoOverview();
            });
        },
        renderCargoOverview : function () {
            this.render(new CargoOverviewView());
            Jumbotron.render();
            $("#overview-btn").hide();
        },
        renderBookCargo : function () {
            this.render(new CargoFormView());
            Jumbotron.render($("#cargo-form-jumbotron-tpl").html());
        },
        renderListRouteCandidates : function (cargoRouting, routeCandidates) {
            this.render(new RouteCandidateListView({model : {cargoRouting : cargoRouting, routeCandidates : routeCandidates, locations : Locations}}));
            Jumbotron.render($("#show-route-candidates-jumbotron-tpl").html());
        },
        renderCargoRoutingDetails : function (cargoRouting) {
            this.render(
                new CargoRoutingDetailsView({model : {
                    cargoRouting : cargoRouting,
                    locations : Locations
                }})
            );
            Jumbotron.render($("#cargo-show-jumbotron-tpl").html());
            $("#overview-btn").show();
        }
    });

    var JumbotronView = Backbone.View.extend({
        initialize : function() {
            this.defaultContent = this.$el.html();
        },
        render : function (content) {
            if (typeof content == "undefined") {
                this.$el.html(this.defaultContent);
            } else {
                this.$el.html(content);
            }
        }
    })

    var Jumbotron = new JumbotronView({el : $(".jumbotron")});
    var App = new AppView({el : $("#booking-app-container")});

</script>

